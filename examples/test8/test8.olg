define(node,{string,string,int});
define(log,{string,string,int});
define(missing_log,{string,string,int});
define(pre,{string,string,int});
define(post,{string,string,int});
define(node_prov0,{string,string,int,int});
define(log_prov0,{string,string,int,int});
define(log_prov1,{string,string,int,string,int});
define(log_prov2,{string,string,int});
define(missing_log_prov0,{string,string,int,string});
define(pre_prov0,{string,string,int});
define(post_prov0,{string,string,int});
define(bcast,{string,string,int});
define(clock,{string,string,int,int});
define(crash,{string,string,int});
node("a","b",1);
node("a","c",1);
node("b","a",1);
node("b","c",1);
node("c","a",1);
node("c","b",1);
bcast("a","hello",1);
node(Node,Neighbor,SndTime+1) :-  node(Node,Neighbor,SndTime), clock(Node,Node,SndTime,DelivTime) ;
//log(Node,Pload,SndTime+1) :-  log(Node,Pload,SndTime), clock(Node,Node,SndTime,SndTime+1) ;
//log(Node2,Pload,DelivTime) :-  bcast(Node1,Pload,SndTime), node(Node1,Node2,SndTime), clock(Node1,Node2,SndTime,DelivTime) ;
//log(Node,Pload,SndTime) :-  bcast(Node,Pload,SndTime) ;
//missing_log(A,Pl,SndTime) :-  log(X,Pl,SndTime), node(X,A,SndTime),notin log(A,Pl,SndTime) ;
//pre(X,Pl,SndTime) :-  log(X,Pl,SndTime),notin bcast(X,Pl,1) ;
//post(X,Pl,SndTime) :-  log(X,Pl,SndTime),notin missing_log(_,Pl,SndTime) ;
//node_prov0(Node,Neighbor,SndTime+1,SndTime) :-  node(Node,Neighbor,SndTime), clock(Node,Node,SndTime,SndTime+1) ;
//log_prov0(Node,Pload,SndTime+1,SndTime) :-  log(Node,Pload,SndTime), clock(Node,Node,SndTime,SndTime+1) ;
//log_prov1(Node2,Pload,DelivTime,Node1,SndTime) :-  bcast(Node1,Pload,SndTime), node(Node1,Node2,SndTime), clock(Node1,Node2,SndTime,DelivTime) ;
//log_prov2(Node,Pload,SndTime) :-  bcast(Node,Pload,SndTime) ;
//missing_log_prov0(A,Pl,SndTime,X) :-  log(X,Pl,SndTime), node(X,A,SndTime),notin log(A,Pl,SndTime) ;
//pre_prov0(X,Pl,SndTime) :-  log(X,Pl,SndTime),notin bcast(X,Pl,1) ;
//post_prov0(X,Pl,SndTime) :-  log(X,Pl,SndTime),notin missing_log(_,Pl,SndTime) ;
crash("NULL","NULL",99999999);
