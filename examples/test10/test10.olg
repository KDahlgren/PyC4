define(pre,{string,string,int,int});
define(post,{string,string,int,int});
define(no_match_exists,{string,string,int,int});
define(group,{string,string,int});
define(nodeid,{string,string,int,int});
define(clients,{string,int});
define(now,{string,int,int});
define(member,{string,string,int});
define(propagate,{string,string,string,int});
define(view_change,{string,string,int});
define(view_change_message,{string,string,int});
define(update_primary,{string,string,int});
define(update_primary_sent,{string,string,int});
define(primary,{string,string,int});
define(client,{string,string,int});
define(client_reg,{string,string,int});
define(client_known,{string,string,int});
define(client_known_reg,{string,string,int});
define(promote,{string,string,int});
define(uncrashed_nodes,{string,string,int});
define(min_val,{string,int,int});
define(min_nodeid,{string,int,int});
define(max_nodeid,{string,int,int});
define(max_node_val,{string,int,int});
define(log_max,{string,string,int,int});
define(write_req_msg,{string,string,string,int,int});
define(write_queue,{string,string,string,int,int});
define(write_request,{string,string,string,int,int});
define(write_dequeue,{string,string,string,int,int});
define(send_ack_to,{string,string,int,int});
define(replica_write_queue,{string,string,string,int,int,int});
define(primary_to_be,{string,int});
define(promoted,{string,string,int});
define(min_replica_val,{string,int,int});
define(min_replica_node,{string,int,int});
define(replica_write,{string,string,string,int,int,int});
define(replica_write_dequeue,{string,string,string,int,int,int});
define(log,{string,string,string,int,int});
define(ack_int,{string,string,string,int,int});
define(missing_ack,{string,string,string,int,int});
define(chain_ack,{string,string,string,int,int});
define(chain_ack_sent,{string,string,string,int,int});
define(ack,{string,string,string,int,int});
define(pre_prov0,{string,string,int,string,int,string});
define(post_prov1,{string,string,int,string,int,string,int,string,int});
define(post_prov2,{string,string,int,string,int,string,string,int,int});
define(pre_prov3,{string,string,int,string,int,string});
define(post_prov4,{string,string,int,string,int,string});
define(no_match_exists_prov5,{string,string,int,int,string});
define(group_prov6,{string,string,int,int});
define(nodeid_prov7,{string,string,int,int,int});
define(clients_prov8,{string,int,int});
define(now_prov9,{string,int,int,int,int});
define(member_prov10,{string,string,int});
define(member_prov11,{string,string,string,int});
define(propagate_prov12,{string,string,string,int,int});
define(member_prov13,{string,string,string,int});
define(propagate_prov14,{string,string,string,int,int});
define(view_change_prov15,{string,string,int,int,string,int,int});
define(member_prov16,{string,string,int,int});
define(member_prov17,{string,string,int,int});
define(view_change_message_prov18,{string,string,string,int,int});
define(view_change_message_prov19,{string,string,string,int,int});
define(member_prov20,{string,string,int,int});
define(member_prov21,{string,string,int,int});
define(update_primary_prov22,{string,string,string,int,int});
define(update_primary_sent_prov23,{string,string,int,string,int});
define(update_primary_prov24,{string,string,string,int,int});
define(update_primary_sent_prov25,{string,string,int,string,int});
define(update_primary_sent_prov26,{string,string,int,int});
define(primary_prov27,{string,string,int,int});
define(primary_prov28,{string,string,int,int,int,int});
define(primary_prov29,{string,string,int,int});
define(client_prov30,{string,string,int});
define(client_reg_prov31,{string,string,int,int});
define(client_prov32,{string,string,int,int});
define(client_prov33,{string,string,int,int,int,int});
define(client_known_prov34,{string,string,int});
define(client_known_reg_prov35,{string,string,int,int});
define(client_known_prov36,{string,string,int,int});
define(client_known_prov37,{string,string,int,int,int,int});
define(promote_prov38,{string,string,int,int,string});
define(promote_prov39,{string,string,int,int});
define(uncrashed_nodes_prov40,{string,string,int,int});
define(uncrashed_nodes_prov41,{string,string,int,int,int,int});
define(min_val_vars,{string,int,int});
define(min_val_prov42,{string,int,int});
define(min_nodeid_vars,{string,int,int,string});
define(min_nodeid_prov43,{string,int,int});
define(max_nodeid_vars,{string,int,int,string});
define(max_nodeid_prov44,{string,int,int});
define(max_node_val_vars,{string,int,int});
define(max_node_val_prov45,{string,int,int});
define(max_node_val_prov46,{string,int,int});
define(log_max_vars,{string,string,int,int});
define(log_max_prov47,{string,string,int,int});
define(write_req_msg_prov48,{string,string,string,int,int,int});
define(write_queue_prov49,{string,string,string,int,int});
define(write_queue_prov50,{string,string,string,int,int,int});
define(write_request_prov51,{string,string,string,int,int});
define(write_dequeue_prov52,{string,string,string,int,int});
define(write_dequeue_prov53,{string,string,string,int,int,int});
define(write_request_prov54,{string,string,string,int,string,int,int});
define(send_ack_to_prov55,{string,string,int,string,int,string,int});
define(send_ack_to_prov56,{string,string,int,int,int});
define(replica_write_queue_prov57,{string,string,string,int,int,int});
define(replica_write_queue_prov58,{string,string,string,int,int,int});
define(primary_to_be_prov59,{string,string,int,int});
define(promoted_prov60,{string,string,int,int});
define(promoted_prov61,{string,string,int,int});
define(min_replica_val_vars,{string,int,int});
define(min_replica_val_prov62,{string,int,int});
define(min_replica_val_prov63,{string,int,int});
define(min_replica_node_vars,{string,int,int,int});
define(min_replica_node_prov64,{string,int,int});
define(min_replica_node_prov65,{string,int,int,int});
define(replica_write_prov66,{string,string,string,int,int,int,int});
define(replica_write_dequeue_prov67,{string,string,string,int,int,int});
define(replica_write_dequeue_prov68,{string,string,string,int,int,int,int});
define(replica_write_dequeue_prov69,{string,string,string,int,int,int,int});
define(replica_write_queue_prov70,{string,string,string,int,int,int,int});
define(log_prov71,{string,string,string,int,int});
define(log_prov72,{string,string,string,int,int});
define(log_prov73,{string,string,string,int,int,int});
define(ack_int_prov74,{string,string,string,int,int,int});
define(missing_ack_prov75,{string,string,string,int,int});
define(chain_ack_prov76,{string,string,string,int,int,int});
define(chain_ack_sent_prov77,{string,string,string,int,int,int});
define(chain_ack_prov78,{string,string,string,int,int,int});
define(chain_ack_sent_prov79,{string,string,string,int,int,int});
define(ack_prov80,{string,string,string,int,int});
define(chain_ack_prov81,{string,string,string,int,int,int});
define(ack_int_prov82,{string,string,string,int,int,int});
define(ack_prov83,{string,string,string,int,int,int});
define(begin,{string,int});
define(write_req,{string,string,string,int,int});
define(clock,{string,string,int,int});
define(crash,{string,string,int,int});
group("a","G",1);
group("b","G",1);
group("c","G",1);
group("C","G",1);
group("G","G",1);
begin("a",1);
begin("b",1);
begin("c",1);
begin("G",1);
nodeid("G","a",1,1);
nodeid("G","b",2,1);
nodeid("G","c",3,1);
nodeid("a","a",1,1);
nodeid("a","b",2,1);
nodeid("a","c",3,1);
nodeid("b","a",1,1);
nodeid("b","b",2,1);
nodeid("b","c",3,1);
nodeid("c","a",1,1);
nodeid("c","b",2,1);
nodeid("c","c",3,1);
clients("C",1);
primary("G","c",1);
primary("a","c",1);
primary("b","c",1);
primary("c","c",1);
primary("C","c",1);
member("G","c",1);
write_req("C","Data1","b",1,1);
write_req("C","Data2","c",2,1);
now("G",1,1);
now("a",1,1);
now("b",1,1);
now("c",1,1);
now("C",1,1);
pre("Durability",X,Value,NRESERVED) :-  group(G,G,NRESERVED), ack(C,X,_,Value,NRESERVED), clients(C,NRESERVED), clock(G,G,NRESERVED,_),notin crash(G,G,_,NRESERVED);
post("Durability",X,Value2,NRESERVED) :-  group(G,G,NRESERVED), ack(C,X,_,Value1,NRESERVED), clients(C,NRESERVED), member(G,Node,NRESERVED), nodeid(G,Node,Nodeid,NRESERVED), min_nodeid(G,Nodeid,NRESERVED), max_node_val(Node,Value2,NRESERVED), clock(G,G,NRESERVED,_),notin crash(G,G,_,NRESERVED),Node!=G,Value2==Value1;
post("Durability",X,Value1,NRESERVED) :-  group(G,G,NRESERVED), ack(C,X,_,Value1,NRESERVED), clients(C,NRESERVED), member(G,Node,NRESERVED), nodeid(G,Node,Nodeid,NRESERVED), min_nodeid(G,Nodeid,NRESERVED), max_node_val(Node,Value2,NRESERVED), clock(G,G,NRESERVED,_),notin crash(G,G,_,NRESERVED),Value2>Value1,Node!=G;
pre("Consistency",X,Value,NRESERVED) :-  log_max(Node,X,Value,NRESERVED), member(G,Node,NRESERVED), group(G,G,NRESERVED), clock(Node,Node,NRESERVED,_),notin clients(Node,NRESERVED),Node!=G;
post("Consistency",X,Value,NRESERVED) :-  log_max(Node,X,Value,NRESERVED), group(G,G,NRESERVED), member(G,Node,NRESERVED), clock(Node,Node,NRESERVED,_),notin clients(Node,NRESERVED),notin no_match_exists(Node,X,Value,NRESERVED),Node!=G;
no_match_exists(Node,X,Value,NRESERVED) :-  log_max(Node,X,Value,NRESERVED), member(Node,Node,NRESERVED), member(Node,Other,NRESERVED), clock(Node,Node,NRESERVED,_),notin log_max(Other,X,Value,NRESERVED),notin clients(Node,NRESERVED),notin clients(Other,NRESERVED),Node!="G",Other!="G",Node!=Other;
group(M,G,MRESERVED) :-  group(M,G,NRESERVED), clock(M,_,NRESERVED,MRESERVED);
nodeid(Node1,Node2,Nodeid,MRESERVED) :-  nodeid(Node1,Node2,Nodeid,NRESERVED), clock(Node1,_,NRESERVED,MRESERVED);
clients(C,MRESERVED) :-  clients(C,NRESERVED), clock(C,_,NRESERVED,MRESERVED);
now(Node,Time+1,MRESERVED) :-  now(Node,Time,NRESERVED), clock(Node,_,NRESERVED,MRESERVED);
member(G,M,NRESERVED) :-  begin(M,NRESERVED), group(M,G,NRESERVED), clock(M,M,NRESERVED,_);
member(M,N,NRESERVED) :-  group(G,G,NRESERVED), member(G,M,NRESERVED), member(G,N,NRESERVED), clock(G,G,NRESERVED,_),notin propagate(G,M,N,NRESERVED),M!=G,N!=G;
propagate(G,M,N,MRESERVED) :-  group(G,G,NRESERVED), member(G,M,NRESERVED), member(G,N,NRESERVED), clock(G,_,NRESERVED,MRESERVED),M!=G;
member(C,M,NRESERVED) :-  group(G,G,NRESERVED), member(G,M,NRESERVED), client(G,C,NRESERVED), clock(G,G,NRESERVED,_),notin propagate(G,C,M,NRESERVED);
propagate(G,C,M,MRESERVED) :-  group(G,G,NRESERVED), member(G,M,NRESERVED), client(G,C,NRESERVED), clock(G,_,NRESERVED,MRESERVED);
view_change(G,M,MRESERVED) :-  group(G,G,NRESERVED), member(G,M,NRESERVED), now(G,Now,NRESERVED), crash(G,Other,Time,NRESERVED), clock(G,_,NRESERVED,MRESERVED),notin crash(G,M,Time,NRESERVED),Now==Time,M!=G;
member(G,M,MRESERVED) :-  view_change(G,M,NRESERVED), clock(G,_,NRESERVED,MRESERVED);
member(G,M,MRESERVED) :-  group(G,G,NRESERVED), member(G,M,NRESERVED), clock(G,_,NRESERVED,MRESERVED),notin view_change(G,_,NRESERVED);
view_change_message(M,N,MRESERVED) :-  group(G,G,NRESERVED), view_change(G,M,NRESERVED), view_change(G,N,NRESERVED), clock(G,M,NRESERVED,MRESERVED),M!=G,N!=G;
view_change_message(C,M,MRESERVED) :-  group(G,G,NRESERVED), view_change(G,M,NRESERVED), client(G,C,NRESERVED), clock(G,C,NRESERVED,MRESERVED),M!=G;
member(M,N,MRESERVED) :-  view_change_message(M,N,NRESERVED), clock(M,_,NRESERVED,MRESERVED);
member(M,N,MRESERVED) :-  member(M,N,NRESERVED), clock(M,_,NRESERVED,MRESERVED),notin view_change_message(M,_,NRESERVED),M!="G";
update_primary(M,Node,MRESERVED) :-  group(G,G,NRESERVED), uncrashed_nodes(G,M,NRESERVED), promote(G,Node,NRESERVED), clock(G,M,NRESERVED,MRESERVED),notin update_primary_sent(G,M,NRESERVED);
update_primary_sent(G,M,MRESERVED) :-  group(G,G,NRESERVED), uncrashed_nodes(G,M,NRESERVED), promote(G,Node,NRESERVED), clock(G,_,NRESERVED,MRESERVED);
update_primary(C,Node,MRESERVED) :-  group(G,G,NRESERVED), client(G,C,NRESERVED), promote(G,Node,NRESERVED), clock(G,C,NRESERVED,MRESERVED),notin update_primary_sent(G,C,NRESERVED);
update_primary_sent(G,C,MRESERVED) :-  group(G,G,NRESERVED), client(G,C,NRESERVED), promote(G,Node,NRESERVED), clock(G,_,NRESERVED,MRESERVED);
update_primary_sent(G,M,MRESERVED) :-  update_primary_sent(G,M,NRESERVED), clock(G,_,NRESERVED,MRESERVED);
primary(M,L,MRESERVED) :-  primary(M,L,NRESERVED), clock(M,_,NRESERVED,MRESERVED),notin update_primary(M,_,NRESERVED),notin crash(M,M,_,NRESERVED);
primary(M,L,MRESERVED) :-  primary(M,L,NRESERVED), crash(M,M,Time,NRESERVED), now(M,Now,NRESERVED), clock(M,_,NRESERVED,MRESERVED),notin update_primary(M,_,NRESERVED),Now<Time;
primary(M,Node,MRESERVED) :-  update_primary(M,Node,NRESERVED), clock(M,_,NRESERVED,MRESERVED);
client(G,C,NRESERVED) :-  clients(C,NRESERVED), group(C,G,NRESERVED), clock(C,C,NRESERVED,_),notin client_reg(C,G,NRESERVED);
client_reg(C,G,MRESERVED) :-  clients(C,NRESERVED), group(C,G,NRESERVED), clock(C,_,NRESERVED,MRESERVED);
client(G,C,MRESERVED) :-  client(G,C,NRESERVED), clock(G,_,NRESERVED,MRESERVED),notin crash(G,C,_,NRESERVED);
client(G,C,MRESERVED) :-  client(G,C,NRESERVED), crash(G,C,Time,NRESERVED), now(G,Now,NRESERVED), clock(G,_,NRESERVED,MRESERVED),Now<Time;
client_known(M,C,NRESERVED) :-  clients(C,NRESERVED), member(C,M,NRESERVED), clock(C,C,NRESERVED,_),notin client_known_reg(C,M,NRESERVED);
client_known_reg(C,M,MRESERVED) :-  clients(C,NRESERVED), member(C,M,NRESERVED), clock(C,_,NRESERVED,MRESERVED);
client_known(M,C,MRESERVED) :-  client_known(M,C,NRESERVED), clock(M,_,NRESERVED,MRESERVED),notin crash(M,C,_,NRESERVED);
client_known(M,C,MRESERVED) :-  client_known(M,C,NRESERVED), crash(M,C,Time,NRESERVED), now(M,Now,NRESERVED), clock(M,_,NRESERVED,MRESERVED),Now<Time;
promote(G,Node,NRESERVED) :-  group(G,G,NRESERVED), max_nodeid(G,Nodeid,NRESERVED), nodeid(G,Node,Nodeid,NRESERVED), primary(G,Primary,NRESERVED), clock(G,G,NRESERVED,_),Primary!=Node;
promote(G,Node,NRESERVED) :-  group(G,G,NRESERVED), max_nodeid(G,Nodeid,NRESERVED), nodeid(G,Node,Nodeid,NRESERVED), clock(G,G,NRESERVED,_),notin primary(G,Node,NRESERVED);
uncrashed_nodes(G,Node,MRESERVED) :-  group(G,G,NRESERVED), member(G,Node,NRESERVED), clock(G,_,NRESERVED,MRESERVED),notin crash(G,Node,_,NRESERVED),Node!=G;
uncrashed_nodes(G,Node,MRESERVED) :-  group(G,G,NRESERVED), member(G,Node,NRESERVED), crash(G,Node,Time,NRESERVED), now(G,Now,NRESERVED), clock(G,_,NRESERVED,MRESERVED),Node!=G,Now<Time;
min_val(Node,min<Value>,NRESERVED) :-  min_val_vars(Node,Value,NRESERVED);
min_nodeid(G,min<Nodeid>,NRESERVED) :-  min_nodeid_vars(G,Nodeid,NRESERVED,_);
max_nodeid(G,max<Nodeid>,NRESERVED) :-  max_nodeid_vars(G,Nodeid,NRESERVED,_);
max_node_val(Node,max<Value>,NRESERVED) :-  max_node_val_vars(Node,Value,NRESERVED),Node!="G";
max_node_val(Node,0,NRESERVED) :-  member(Node,Node,NRESERVED), clock(Node,Node,NRESERVED,_),notin log(Node,_,_,_,NRESERVED),Node!="G";
log_max(Node,X,max<Value>,NRESERVED) :-  log_max_vars(Node,X,Value,NRESERVED);
write_req_msg(Node,Data,Client,Value,MRESERVED) :-  write_req(Client,Data,Node,Value,NRESERVED), clients(Client,NRESERVED), clock(Client,Node,NRESERVED,MRESERVED);
write_queue(Node,Data,Client,Value,NRESERVED) :-  write_req_msg(Node,Data,Client,Value,NRESERVED), clock(Node,Node,NRESERVED,_);
write_queue(Node,Data,Origin,Value,MRESERVED) :-  write_queue(Node,Data,Origin,Value,NRESERVED), clock(Node,_,NRESERVED,MRESERVED),notin write_dequeue(Node,Data,Origin,Value,NRESERVED);
write_request(Node,Data,Origin,Value,NRESERVED) :-  write_queue(Node,Data,Origin,Value,NRESERVED), min_val(Node,Value,NRESERVED), clock(Node,Node,NRESERVED,_);
write_dequeue(Node,Data,Origin,Value,NRESERVED) :-  write_request(Node,Data,Origin,Value,NRESERVED), clock(Node,Node,NRESERVED,_);
write_dequeue(Node,Data,Origin,Value,MRESERVED) :-  write_dequeue(Node,Data,Origin,Value,NRESERVED), clock(Node,_,NRESERVED,MRESERVED);
write_request(Primary,Data,M,Value,MRESERVED) :-  write_request(M,Data,Origin,Value,NRESERVED), primary(M,Primary,NRESERVED), clock(M,Primary,NRESERVED,MRESERVED),Primary!=M;
send_ack_to(M,Origin,Value,MRESERVED) :-  write_request(M,Data,Origin,Value,NRESERVED), primary(M,Primary,NRESERVED), clock(M,_,NRESERVED,MRESERVED),Primary!=M;
send_ack_to(M,Origin,Value,MRESERVED) :-  send_ack_to(M,Origin,Value,NRESERVED), clock(M,_,NRESERVED,MRESERVED);
replica_write_queue(Primary,Data,Other,Value,Nodeid,NRESERVED) :-  write_request(Primary,Data,_,Value,NRESERVED), member(Primary,Other,NRESERVED), primary(Primary,Primary,NRESERVED), nodeid(Primary,Other,Nodeid,NRESERVED), clock(Primary,Primary,NRESERVED,_),Other!=Primary;
replica_write_queue(Node,Data,Other,Value,Nodeid,NRESERVED) :-  log(Node,Data,_,Value,NRESERVED), member(Node,Other,NRESERVED), primary_to_be(Node,NRESERVED), nodeid(Node,Other,Nodeid,NRESERVED), clock(Node,Node,NRESERVED,_),Other!=Node;
primary_to_be(Node,MRESERVED) :-  promote(G,Node,NRESERVED), member(G,Node,NRESERVED), clock(G,Node,NRESERVED,MRESERVED),notin promoted(G,Node,NRESERVED);
promoted(G,Node,MRESERVED) :-  promote(G,Node,NRESERVED), member(G,Node,NRESERVED), clock(G,_,NRESERVED,MRESERVED);
promoted(G,Node,MRESERVED) :-  promoted(G,Node,NRESERVED), clock(G,_,NRESERVED,MRESERVED),notin primary(G,Node,NRESERVED);
min_replica_val(Node,min<Value>,NRESERVED) :-  min_replica_val_vars(Node,Value,NRESERVED);
min_replica_val(Node,0,NRESERVED) :-  member(Node,Node,NRESERVED), clock(Node,Node,NRESERVED,_),notin replica_write_queue(Node,_,_,_,_,NRESERVED);
min_replica_node(Node,min<Nodeid>,NRESERVED) :-  min_replica_node_vars(Node,Nodeid,NRESERVED,_),Value!=0;
min_replica_node(Node,0,NRESERVED) :-  member(Node,Node,NRESERVED), min_replica_val(Node,Value,NRESERVED), clock(Node,Node,NRESERVED,_),Value==0;
replica_write(Other,Data,Primary,Value,Nodeid,MRESERVED) :-  replica_write_queue(Primary,Data,Other,Value,Nodeid,NRESERVED), min_replica_val(Primary,Value,NRESERVED), primary(Primary,Primary,NRESERVED), min_replica_node(Primary,Nodeid,NRESERVED), clock(Primary,Other,NRESERVED,MRESERVED);
replica_write_dequeue(Primary,Data,Other,Value,Nodeid,NRESERVED) :-  replica_write_queue(Primary,Data,Other,Value,Nodeid,NRESERVED), min_replica_val(Primary,Value,NRESERVED), primary(Primary,Primary,NRESERVED), min_replica_node(Primary,Nodeid,NRESERVED), clock(Primary,Primary,NRESERVED,_);
replica_write_dequeue(Node,Data,Origin,Value,Nodeid,MRESERVED) :-  replica_write_queue(Node,Data,Origin,Value,Nodeid,NRESERVED), clock(Node,_,NRESERVED,MRESERVED),notin primary(Node,Node,NRESERVED),Node!="G";
replica_write_dequeue(Node,Data,Origin,Value,Nodeid,MRESERVED) :-  replica_write_dequeue(Node,Data,Origin,Value,Nodeid,NRESERVED), clock(Node,_,NRESERVED,MRESERVED);
replica_write_queue(Node,Data,Origin,Value,Nodeid,MRESERVED) :-  replica_write_queue(Node,Data,Origin,Value,Nodeid,NRESERVED), clock(Node,_,NRESERVED,MRESERVED),notin replica_write_dequeue(Node,Data,Origin,Value,Nodeid,NRESERVED);
log(Node,Data,Origin,Value,NRESERVED) :-  replica_write(Node,Data,Origin,Value,_,NRESERVED), clock(Node,Node,NRESERVED,_);
log(Node,Data,Origin,Value,NRESERVED) :-  write_request(Node,Data,Origin,Value,NRESERVED), primary(Node,Node,NRESERVED), clock(Node,Node,NRESERVED,_);
log(Node,Data,Origin,Value,MRESERVED) :-  log(Node,Data,Origin,Value,NRESERVED), clock(Node,_,NRESERVED,MRESERVED);
ack_int(Origin,Data,Replica,Value,MRESERVED) :-  replica_write(Replica,Data,Origin,Value,_,NRESERVED), primary(Replica,Origin,NRESERVED), clock(Replica,Origin,NRESERVED,MRESERVED);
missing_ack(Primary,Data,Other,Value,NRESERVED) :-  log(Primary,Data,_,Value,NRESERVED), primary(Primary,Primary,NRESERVED), member(Primary,Other,NRESERVED), clock(Primary,Primary,NRESERVED,_),notin ack_int(Primary,Data,Other,Value,NRESERVED),Primary!=Other;
chain_ack(Origin,Data,Acker,Value,MRESERVED) :-  primary(Acker,Acker,NRESERVED), log(Acker,Data,Origin,Value,NRESERVED), clock(Acker,Origin,NRESERVED,MRESERVED),notin missing_ack(Acker,Data,_,Value,NRESERVED),notin chain_ack_sent(Acker,Data,Origin,Value,NRESERVED);
chain_ack_sent(Acker,Data,Origin,Value,MRESERVED) :-  primary(Acker,Acker,NRESERVED), log(Acker,Data,Origin,Value,NRESERVED), clock(Acker,_,NRESERVED,MRESERVED),notin missing_ack(Acker,Data,_,Value,NRESERVED);
chain_ack(Origin,Data,Acker,Value,MRESERVED) :-  log(Acker,Data,_,Value,NRESERVED), chain_ack(Acker,Data,_,Value,NRESERVED), send_ack_to(Acker,Origin,Value,NRESERVED), clock(Acker,Origin,NRESERVED,MRESERVED),notin primary(Acker,Acker,NRESERVED),notin chain_ack_sent(Acker,Data,Origin,Value,NRESERVED);
chain_ack_sent(Acker,Data,Origin,Value,MRESERVED) :-  log(Acker,Data,_,Value,NRESERVED), chain_ack(Acker,Data,_,Value,NRESERVED), send_ack_to(Acker,Origin,Value,NRESERVED), clock(Acker,_,NRESERVED,MRESERVED),notin primary(Acker,Acker,NRESERVED);
ack(Origin,Data,Acker,Value,NRESERVED) :-  chain_ack(Origin,Data,Acker,Value,NRESERVED), clients(Origin,NRESERVED), clock(Origin,Origin,NRESERVED,_);
chain_ack(Origin,Data,Acker,Value,MRESERVED) :-  chain_ack(Origin,Data,Acker,Value,NRESERVED), clock(Origin,_,NRESERVED,MRESERVED);
ack_int(Origin,Data,Acker,Value,MRESERVED) :-  ack_int(Origin,Data,Acker,Value,NRESERVED), clock(Origin,_,NRESERVED,MRESERVED);
ack(Origin,Data,Acker,Value,MRESERVED) :-  ack(Origin,Data,Acker,Value,NRESERVED), clock(Origin,_,NRESERVED,MRESERVED);
pre_prov0("Durability",X,Value,G,NRESERVED,C) :-  group(G,G,NRESERVED), ack(C,X,_,Value,NRESERVED), clients(C,NRESERVED), clock(G,G,NRESERVED,_),notin crash(G,G,_,NRESERVED);
post_prov1("Durability",X,Value2,G,NRESERVED,C,Value1,Node,Nodeid) :-  group(G,G,NRESERVED), ack(C,X,_,Value1,NRESERVED), clients(C,NRESERVED), member(G,Node,NRESERVED), nodeid(G,Node,Nodeid,NRESERVED), min_nodeid(G,Nodeid,NRESERVED), max_node_val(Node,Value2,NRESERVED), clock(G,G,NRESERVED,_),notin crash(G,G,_,NRESERVED),Node!=G,Value2==Value1;
post_prov2("Durability",X,Value1,G,NRESERVED,C,Node,Nodeid,Value2) :-  group(G,G,NRESERVED), ack(C,X,_,Value1,NRESERVED), clients(C,NRESERVED), member(G,Node,NRESERVED), nodeid(G,Node,Nodeid,NRESERVED), min_nodeid(G,Nodeid,NRESERVED), max_node_val(Node,Value2,NRESERVED), clock(G,G,NRESERVED,_),notin crash(G,G,_,NRESERVED),Node!=G,Value2>Value1;
pre_prov3("Consistency",X,Value,Node,NRESERVED,G) :-  log_max(Node,X,Value,NRESERVED), member(G,Node,NRESERVED), group(G,G,NRESERVED), clock(Node,Node,NRESERVED,_),notin clients(Node,NRESERVED),Node!=G;
post_prov4("Consistency",X,Value,Node,NRESERVED,G) :-  log_max(Node,X,Value,NRESERVED), group(G,G,NRESERVED), member(G,Node,NRESERVED), clock(Node,Node,NRESERVED,_),notin clients(Node,NRESERVED),notin no_match_exists(Node,X,Value,NRESERVED),Node!=G;
no_match_exists_prov5(Node,X,Value,NRESERVED,Other) :-  log_max(Node,X,Value,NRESERVED), member(Node,Node,NRESERVED), member(Node,Other,NRESERVED), clock(Node,Node,NRESERVED,_),notin log_max(Other,X,Value,NRESERVED),notin clients(Node,NRESERVED),notin clients(Other,NRESERVED),Node!="G",Node!=Other,Other!="G";
group_prov6(M,G,NRESERVED,MRESERVED) :-  group(M,G,NRESERVED), clock(M,_,NRESERVED,MRESERVED);
nodeid_prov7(Node1,Node2,Nodeid,NRESERVED,MRESERVED) :-  nodeid(Node1,Node2,Nodeid,NRESERVED), clock(Node1,_,NRESERVED,MRESERVED);
clients_prov8(C,NRESERVED,MRESERVED) :-  clients(C,NRESERVED), clock(C,_,NRESERVED,MRESERVED);
now_prov9(Node,Time+1,Time,NRESERVED,MRESERVED) :-  now(Node,Time,NRESERVED), clock(Node,_,NRESERVED,MRESERVED);
member_prov10(G,M,NRESERVED) :-  begin(M,NRESERVED), group(M,G,NRESERVED), clock(M,M,NRESERVED,_);
member_prov11(M,N,G,NRESERVED) :-  group(G,G,NRESERVED), member(G,M,NRESERVED), member(G,N,NRESERVED), clock(G,G,NRESERVED,_),notin propagate(G,M,N,NRESERVED),M!=G,N!=G;
propagate_prov12(G,M,N,NRESERVED,MRESERVED) :-  group(G,G,NRESERVED), member(G,M,NRESERVED), member(G,N,NRESERVED), clock(G,_,NRESERVED,MRESERVED),M!=G;
member_prov13(C,M,G,NRESERVED) :-  group(G,G,NRESERVED), member(G,M,NRESERVED), client(G,C,NRESERVED), clock(G,G,NRESERVED,_),notin propagate(G,C,M,NRESERVED);
propagate_prov14(G,C,M,NRESERVED,MRESERVED) :-  group(G,G,NRESERVED), member(G,M,NRESERVED), client(G,C,NRESERVED), clock(G,_,NRESERVED,MRESERVED);
view_change_prov15(G,M,NRESERVED,Now,Other,Time,MRESERVED) :-  group(G,G,NRESERVED), member(G,M,NRESERVED), now(G,Now,NRESERVED), crash(G,Other,Time,NRESERVED), clock(G,_,NRESERVED,MRESERVED),notin crash(G,M,Time,NRESERVED),Now==Time,M!=G;
member_prov16(G,M,NRESERVED,MRESERVED) :-  view_change(G,M,NRESERVED), clock(G,_,NRESERVED,MRESERVED);
member_prov17(G,M,NRESERVED,MRESERVED) :-  group(G,G,NRESERVED), member(G,M,NRESERVED), clock(G,_,NRESERVED,MRESERVED),notin view_change(G,_,NRESERVED);
view_change_message_prov18(M,N,G,NRESERVED,MRESERVED) :-  group(G,G,NRESERVED), view_change(G,M,NRESERVED), view_change(G,N,NRESERVED), clock(G,M,NRESERVED,MRESERVED),M!=G,N!=G;
view_change_message_prov19(C,M,G,NRESERVED,MRESERVED) :-  group(G,G,NRESERVED), view_change(G,M,NRESERVED), client(G,C,NRESERVED), clock(G,C,NRESERVED,MRESERVED),M!=G;
member_prov20(M,N,NRESERVED,MRESERVED) :-  view_change_message(M,N,NRESERVED), clock(M,_,NRESERVED,MRESERVED);
member_prov21(M,N,NRESERVED,MRESERVED) :-  member(M,N,NRESERVED), clock(M,_,NRESERVED,MRESERVED),notin view_change_message(M,_,NRESERVED),M!="G";
update_primary_prov22(M,Node,G,NRESERVED,MRESERVED) :-  group(G,G,NRESERVED), uncrashed_nodes(G,M,NRESERVED), promote(G,Node,NRESERVED), clock(G,M,NRESERVED,MRESERVED),notin update_primary_sent(G,M,NRESERVED);
update_primary_sent_prov23(G,M,NRESERVED,Node,MRESERVED) :-  group(G,G,NRESERVED), uncrashed_nodes(G,M,NRESERVED), promote(G,Node,NRESERVED), clock(G,_,NRESERVED,MRESERVED);
update_primary_prov24(C,Node,G,NRESERVED,MRESERVED) :-  group(G,G,NRESERVED), client(G,C,NRESERVED), promote(G,Node,NRESERVED), clock(G,C,NRESERVED,MRESERVED),notin update_primary_sent(G,C,NRESERVED);
update_primary_sent_prov25(G,C,NRESERVED,Node,MRESERVED) :-  group(G,G,NRESERVED), client(G,C,NRESERVED), promote(G,Node,NRESERVED), clock(G,_,NRESERVED,MRESERVED);
update_primary_sent_prov26(G,M,NRESERVED,MRESERVED) :-  update_primary_sent(G,M,NRESERVED), clock(G,_,NRESERVED,MRESERVED);
primary_prov27(M,L,NRESERVED,MRESERVED) :-  primary(M,L,NRESERVED), clock(M,_,NRESERVED,MRESERVED),notin update_primary(M,_,NRESERVED),notin crash(M,M,_,NRESERVED);
primary_prov28(M,L,NRESERVED,Time,Now,MRESERVED) :-  primary(M,L,NRESERVED), crash(M,M,Time,NRESERVED), now(M,Now,NRESERVED), clock(M,_,NRESERVED,MRESERVED),notin update_primary(M,_,NRESERVED),Now<Time;
primary_prov29(M,Node,NRESERVED,MRESERVED) :-  update_primary(M,Node,NRESERVED), clock(M,_,NRESERVED,MRESERVED);
client_prov30(G,C,NRESERVED) :-  clients(C,NRESERVED), group(C,G,NRESERVED), clock(C,C,NRESERVED,_),notin client_reg(C,G,NRESERVED);
client_reg_prov31(C,G,NRESERVED,MRESERVED) :-  clients(C,NRESERVED), group(C,G,NRESERVED), clock(C,_,NRESERVED,MRESERVED);
client_prov32(G,C,NRESERVED,MRESERVED) :-  client(G,C,NRESERVED), clock(G,_,NRESERVED,MRESERVED),notin crash(G,C,_,NRESERVED);
client_prov33(G,C,NRESERVED,Time,Now,MRESERVED) :-  client(G,C,NRESERVED), crash(G,C,Time,NRESERVED), now(G,Now,NRESERVED), clock(G,_,NRESERVED,MRESERVED),Now<Time;
client_known_prov34(M,C,NRESERVED) :-  clients(C,NRESERVED), member(C,M,NRESERVED), clock(C,C,NRESERVED,_),notin client_known_reg(C,M,NRESERVED);
client_known_reg_prov35(C,M,NRESERVED,MRESERVED) :-  clients(C,NRESERVED), member(C,M,NRESERVED), clock(C,_,NRESERVED,MRESERVED);
client_known_prov36(M,C,NRESERVED,MRESERVED) :-  client_known(M,C,NRESERVED), clock(M,_,NRESERVED,MRESERVED),notin crash(M,C,_,NRESERVED);
client_known_prov37(M,C,NRESERVED,Time,Now,MRESERVED) :-  client_known(M,C,NRESERVED), crash(M,C,Time,NRESERVED), now(M,Now,NRESERVED), clock(M,_,NRESERVED,MRESERVED),Now<Time;
promote_prov38(G,Node,NRESERVED,Nodeid,Primary) :-  group(G,G,NRESERVED), max_nodeid(G,Nodeid,NRESERVED), nodeid(G,Node,Nodeid,NRESERVED), primary(G,Primary,NRESERVED), clock(G,G,NRESERVED,_),Primary!=Node;
promote_prov39(G,Node,NRESERVED,Nodeid) :-  group(G,G,NRESERVED), max_nodeid(G,Nodeid,NRESERVED), nodeid(G,Node,Nodeid,NRESERVED), clock(G,G,NRESERVED,_),notin primary(G,Node,NRESERVED);
uncrashed_nodes_prov40(G,Node,NRESERVED,MRESERVED) :-  group(G,G,NRESERVED), member(G,Node,NRESERVED), clock(G,_,NRESERVED,MRESERVED),notin crash(G,Node,_,NRESERVED),Node!=G;
uncrashed_nodes_prov41(G,Node,NRESERVED,Time,Now,MRESERVED) :-  group(G,G,NRESERVED), member(G,Node,NRESERVED), crash(G,Node,Time,NRESERVED), now(G,Now,NRESERVED), clock(G,_,NRESERVED,MRESERVED),Node!=G,Now<Time;
min_val_vars(Node,Value,NRESERVED) :-  write_queue(Node,_,_,Value,NRESERVED), clock(Node,Node,NRESERVED,_);
min_val_prov42(Node,min<Value>,NRESERVED) :-  min_val_vars(Node,Value,NRESERVED);
min_nodeid_vars(G,Nodeid,NRESERVED,Node) :-  group(G,G,NRESERVED), uncrashed_nodes(G,Node,NRESERVED), nodeid(G,Node,Nodeid,NRESERVED), clock(G,G,NRESERVED,_);
min_nodeid_prov43(G,min<Nodeid>,NRESERVED) :-  min_nodeid_vars(G,Nodeid,NRESERVED,_);
max_nodeid_vars(G,Nodeid,NRESERVED,Node) :-  group(G,G,NRESERVED), uncrashed_nodes(G,Node,NRESERVED), nodeid(G,Node,Nodeid,NRESERVED), clock(G,G,NRESERVED,_);
max_nodeid_prov44(G,max<Nodeid>,NRESERVED) :-  max_nodeid_vars(G,Nodeid,NRESERVED,_);
max_node_val_vars(Node,Value,NRESERVED) :-  member(Node,Node,NRESERVED), log(Node,_,_,Value,NRESERVED), clock(Node,Node,NRESERVED,_),Node!="G";
max_node_val_prov45(Node,max<Value>,NRESERVED) :-  max_node_val_vars(Node,Value,NRESERVED);
max_node_val_prov46(Node,0,NRESERVED) :-  member(Node,Node,NRESERVED), clock(Node,Node,NRESERVED,_),notin log(Node,_,_,_,NRESERVED),Node!="G";
log_max_vars(Node,X,Value,NRESERVED) :-  log(Node,X,_,Value,NRESERVED), clock(Node,Node,NRESERVED,_);
log_max_prov47(Node,X,max<Value>,NRESERVED) :-  log_max_vars(Node,X,Value,NRESERVED);
write_req_msg_prov48(Node,Data,Client,Value,NRESERVED,MRESERVED) :-  write_req(Client,Data,Node,Value,NRESERVED), clients(Client,NRESERVED), clock(Client,Node,NRESERVED,MRESERVED);
write_queue_prov49(Node,Data,Client,Value,NRESERVED) :-  write_req_msg(Node,Data,Client,Value,NRESERVED), clock(Node,Node,NRESERVED,_);
write_queue_prov50(Node,Data,Origin,Value,NRESERVED,MRESERVED) :-  write_queue(Node,Data,Origin,Value,NRESERVED), clock(Node,_,NRESERVED,MRESERVED),notin write_dequeue(Node,Data,Origin,Value,NRESERVED);
write_request_prov51(Node,Data,Origin,Value,NRESERVED) :-  write_queue(Node,Data,Origin,Value,NRESERVED), min_val(Node,Value,NRESERVED), clock(Node,Node,NRESERVED,_);
write_dequeue_prov52(Node,Data,Origin,Value,NRESERVED) :-  write_request(Node,Data,Origin,Value,NRESERVED), clock(Node,Node,NRESERVED,_);
write_dequeue_prov53(Node,Data,Origin,Value,NRESERVED,MRESERVED) :-  write_dequeue(Node,Data,Origin,Value,NRESERVED), clock(Node,_,NRESERVED,MRESERVED);
write_request_prov54(Primary,Data,M,Value,Origin,NRESERVED,MRESERVED) :-  write_request(M,Data,Origin,Value,NRESERVED), primary(M,Primary,NRESERVED), clock(M,Primary,NRESERVED,MRESERVED),Primary!=M;
send_ack_to_prov55(M,Origin,Value,Data,NRESERVED,Primary,MRESERVED) :-  write_request(M,Data,Origin,Value,NRESERVED), primary(M,Primary,NRESERVED), clock(M,_,NRESERVED,MRESERVED),Primary!=M;
send_ack_to_prov56(M,Origin,Value,NRESERVED,MRESERVED) :-  send_ack_to(M,Origin,Value,NRESERVED), clock(M,_,NRESERVED,MRESERVED);
replica_write_queue_prov57(Primary,Data,Other,Value,Nodeid,NRESERVED) :-  write_request(Primary,Data,_,Value,NRESERVED), member(Primary,Other,NRESERVED), primary(Primary,Primary,NRESERVED), nodeid(Primary,Other,Nodeid,NRESERVED), clock(Primary,Primary,NRESERVED,_),Other!=Primary;
replica_write_queue_prov58(Node,Data,Other,Value,Nodeid,NRESERVED) :-  log(Node,Data,_,Value,NRESERVED), member(Node,Other,NRESERVED), primary_to_be(Node,NRESERVED), nodeid(Node,Other,Nodeid,NRESERVED), clock(Node,Node,NRESERVED,_),Other!=Node;
primary_to_be_prov59(Node,G,NRESERVED,MRESERVED) :-  promote(G,Node,NRESERVED), member(G,Node,NRESERVED), clock(G,Node,NRESERVED,MRESERVED),notin promoted(G,Node,NRESERVED);
promoted_prov60(G,Node,NRESERVED,MRESERVED) :-  promote(G,Node,NRESERVED), member(G,Node,NRESERVED), clock(G,_,NRESERVED,MRESERVED);
promoted_prov61(G,Node,NRESERVED,MRESERVED) :-  promoted(G,Node,NRESERVED), clock(G,_,NRESERVED,MRESERVED),notin primary(G,Node,NRESERVED);
min_replica_val_vars(Node,Value,NRESERVED) :-  member(Node,Node,NRESERVED), replica_write_queue(Node,_,_,Value,_,NRESERVED), clock(Node,Node,NRESERVED,_);
min_replica_val_prov62(Node,min<Value>,NRESERVED) :-  min_replica_val_vars(Node,Value,NRESERVED);
min_replica_val_prov63(Node,0,NRESERVED) :-  member(Node,Node,NRESERVED), clock(Node,Node,NRESERVED,_),notin replica_write_queue(Node,_,_,_,_,NRESERVED);
min_replica_node_vars(Node,Nodeid,NRESERVED,Value) :-  member(Node,Node,NRESERVED), min_replica_val(Node,Value,NRESERVED), replica_write_queue(Node,_,_,Value,Nodeid,NRESERVED), clock(Node,Node,NRESERVED,_),Value!=0;
min_replica_node_prov64(Node,min<Nodeid>,NRESERVED) :-  min_replica_node_vars(Node,Nodeid,NRESERVED,_);
min_replica_node_prov65(Node,0,NRESERVED,Value) :-  member(Node,Node,NRESERVED), min_replica_val(Node,Value,NRESERVED), clock(Node,Node,NRESERVED,_),Value==0;
replica_write_prov66(Other,Data,Primary,Value,Nodeid,NRESERVED,MRESERVED) :-  replica_write_queue(Primary,Data,Other,Value,Nodeid,NRESERVED), min_replica_val(Primary,Value,NRESERVED), primary(Primary,Primary,NRESERVED), min_replica_node(Primary,Nodeid,NRESERVED), clock(Primary,Other,NRESERVED,MRESERVED);
replica_write_dequeue_prov67(Primary,Data,Other,Value,Nodeid,NRESERVED) :-  replica_write_queue(Primary,Data,Other,Value,Nodeid,NRESERVED), min_replica_val(Primary,Value,NRESERVED), primary(Primary,Primary,NRESERVED), min_replica_node(Primary,Nodeid,NRESERVED), clock(Primary,Primary,NRESERVED,_);
replica_write_dequeue_prov68(Node,Data,Origin,Value,Nodeid,NRESERVED,MRESERVED) :-  replica_write_queue(Node,Data,Origin,Value,Nodeid,NRESERVED), clock(Node,_,NRESERVED,MRESERVED),notin primary(Node,Node,NRESERVED),Node!="G";
replica_write_dequeue_prov69(Node,Data,Origin,Value,Nodeid,NRESERVED,MRESERVED) :-  replica_write_dequeue(Node,Data,Origin,Value,Nodeid,NRESERVED), clock(Node,_,NRESERVED,MRESERVED);
replica_write_queue_prov70(Node,Data,Origin,Value,Nodeid,NRESERVED,MRESERVED) :-  replica_write_queue(Node,Data,Origin,Value,Nodeid,NRESERVED), clock(Node,_,NRESERVED,MRESERVED),notin replica_write_dequeue(Node,Data,Origin,Value,Nodeid,NRESERVED);
log_prov71(Node,Data,Origin,Value,NRESERVED) :-  replica_write(Node,Data,Origin,Value,_,NRESERVED), clock(Node,Node,NRESERVED,_);
log_prov72(Node,Data,Origin,Value,NRESERVED) :-  write_request(Node,Data,Origin,Value,NRESERVED), primary(Node,Node,NRESERVED), clock(Node,Node,NRESERVED,_);
log_prov73(Node,Data,Origin,Value,NRESERVED,MRESERVED) :-  log(Node,Data,Origin,Value,NRESERVED), clock(Node,_,NRESERVED,MRESERVED);
ack_int_prov74(Origin,Data,Replica,Value,NRESERVED,MRESERVED) :-  replica_write(Replica,Data,Origin,Value,_,NRESERVED), primary(Replica,Origin,NRESERVED), clock(Replica,Origin,NRESERVED,MRESERVED);
missing_ack_prov75(Primary,Data,Other,Value,NRESERVED) :-  log(Primary,Data,_,Value,NRESERVED), primary(Primary,Primary,NRESERVED), member(Primary,Other,NRESERVED), clock(Primary,Primary,NRESERVED,_),notin ack_int(Primary,Data,Other,Value,NRESERVED),Primary!=Other;
chain_ack_prov76(Origin,Data,Acker,Value,NRESERVED,MRESERVED) :-  primary(Acker,Acker,NRESERVED), log(Acker,Data,Origin,Value,NRESERVED), clock(Acker,Origin,NRESERVED,MRESERVED),notin missing_ack(Acker,Data,_,Value,NRESERVED),notin chain_ack_sent(Acker,Data,Origin,Value,NRESERVED);
chain_ack_sent_prov77(Acker,Data,Origin,Value,NRESERVED,MRESERVED) :-  primary(Acker,Acker,NRESERVED), log(Acker,Data,Origin,Value,NRESERVED), clock(Acker,_,NRESERVED,MRESERVED),notin missing_ack(Acker,Data,_,Value,NRESERVED);
chain_ack_prov78(Origin,Data,Acker,Value,NRESERVED,MRESERVED) :-  log(Acker,Data,_,Value,NRESERVED), chain_ack(Acker,Data,_,Value,NRESERVED), send_ack_to(Acker,Origin,Value,NRESERVED), clock(Acker,Origin,NRESERVED,MRESERVED),notin primary(Acker,Acker,NRESERVED),notin chain_ack_sent(Acker,Data,Origin,Value,NRESERVED);
chain_ack_sent_prov79(Acker,Data,Origin,Value,NRESERVED,MRESERVED) :-  log(Acker,Data,_,Value,NRESERVED), chain_ack(Acker,Data,_,Value,NRESERVED), send_ack_to(Acker,Origin,Value,NRESERVED), clock(Acker,_,NRESERVED,MRESERVED),notin primary(Acker,Acker,NRESERVED);
ack_prov80(Origin,Data,Acker,Value,NRESERVED) :-  chain_ack(Origin,Data,Acker,Value,NRESERVED), clients(Origin,NRESERVED), clock(Origin,Origin,NRESERVED,_);
chain_ack_prov81(Origin,Data,Acker,Value,NRESERVED,MRESERVED) :-  chain_ack(Origin,Data,Acker,Value,NRESERVED), clock(Origin,_,NRESERVED,MRESERVED);
ack_int_prov82(Origin,Data,Acker,Value,NRESERVED,MRESERVED) :-  ack_int(Origin,Data,Acker,Value,NRESERVED), clock(Origin,_,NRESERVED,MRESERVED);
ack_prov83(Origin,Data,Acker,Value,NRESERVED,MRESERVED) :-  ack(Origin,Data,Acker,Value,NRESERVED), clock(Origin,_,NRESERVED,MRESERVED);
crash("NULL","NULL",99999999,99999999);
clock("a","a",1,2);
clock("a","b",1,2);
clock("a","c",1,2);
clock("a","C",1,2);
clock("a","G",1,2);
clock("b","a",1,2);
clock("b","b",1,2);
clock("b","c",1,2);
clock("b","C",1,2);
clock("b","G",1,2);
clock("c","a",1,2);
clock("c","b",1,2);
clock("c","c",1,2);
clock("c","C",1,2);
clock("c","G",1,2);
clock("C","a",1,2);
clock("C","b",1,2);
clock("C","c",1,2);
clock("C","C",1,2);
clock("C","G",1,2);
clock("G","a",1,2);
clock("G","b",1,2);
clock("G","c",1,2);
clock("G","C",1,2);
clock("G","G",1,2);
clock("a","a",2,3);
clock("a","b",2,3);
clock("a","c",2,3);
clock("a","C",2,3);
clock("a","G",2,3);
clock("b","a",2,3);
clock("b","b",2,3);
clock("b","c",2,3);
clock("b","C",2,3);
clock("b","G",2,3);
clock("c","a",2,3);
clock("c","b",2,3);
clock("c","c",2,3);
clock("c","C",2,3);
clock("c","G",2,3);
clock("C","a",2,3);
clock("C","b",2,3);
clock("C","c",2,3);
clock("C","C",2,3);
clock("C","G",2,3);
clock("G","a",2,3);
clock("G","b",2,3);
clock("G","c",2,3);
clock("G","C",2,3);
clock("G","G",2,3);
clock("a","a",3,4);
clock("a","b",3,4);
clock("a","c",3,4);
clock("a","C",3,4);
clock("a","G",3,4);
clock("b","a",3,4);
clock("b","b",3,4);
clock("b","c",3,4);
clock("b","C",3,4);
clock("b","G",3,4);
clock("c","a",3,4);
clock("c","b",3,4);
clock("c","c",3,4);
clock("c","C",3,4);
clock("c","G",3,4);
clock("C","a",3,4);
clock("C","b",3,4);
clock("C","c",3,4);
clock("C","C",3,4);
clock("C","G",3,4);
clock("G","a",3,4);
clock("G","b",3,4);
clock("G","c",3,4);
clock("G","C",3,4);
clock("G","G",3,4);
clock("a","a",4,5);
clock("a","b",4,5);
clock("a","c",4,5);
clock("a","C",4,5);
clock("a","G",4,5);
clock("b","a",4,5);
clock("b","b",4,5);
clock("b","c",4,5);
clock("b","C",4,5);
clock("b","G",4,5);
clock("c","a",4,5);
clock("c","b",4,5);
clock("c","c",4,5);
clock("c","C",4,5);
clock("c","G",4,5);
clock("C","a",4,5);
clock("C","b",4,5);
clock("C","c",4,5);
clock("C","C",4,5);
clock("C","G",4,5);
clock("G","a",4,5);
clock("G","b",4,5);
clock("G","c",4,5);
clock("G","C",4,5);
clock("G","G",4,5);
clock("a","a",5,6);
clock("a","b",5,6);
clock("a","c",5,6);
clock("a","C",5,6);
clock("a","G",5,6);
clock("b","a",5,6);
clock("b","b",5,6);
clock("b","c",5,6);
clock("b","C",5,6);
clock("b","G",5,6);
clock("c","a",5,6);
clock("c","b",5,6);
clock("c","c",5,6);
clock("c","C",5,6);
clock("c","G",5,6);
clock("C","a",5,6);
clock("C","b",5,6);
clock("C","c",5,6);
clock("C","C",5,6);
clock("C","G",5,6);
clock("G","a",5,6);
clock("G","b",5,6);
clock("G","c",5,6);
clock("G","C",5,6);
clock("G","G",5,6);
clock("a","a",6,7);
clock("a","b",6,7);
clock("a","c",6,7);
clock("a","C",6,7);
clock("a","G",6,7);
clock("b","a",6,7);
clock("b","b",6,7);
clock("b","c",6,7);
clock("b","C",6,7);
clock("b","G",6,7);
clock("c","a",6,7);
clock("c","b",6,7);
clock("c","c",6,7);
clock("c","C",6,7);
clock("c","G",6,7);
clock("C","a",6,7);
clock("C","b",6,7);
clock("C","c",6,7);
clock("C","C",6,7);
clock("C","G",6,7);
clock("G","a",6,7);
clock("G","b",6,7);
clock("G","c",6,7);
clock("G","C",6,7);
clock("G","G",6,7);
clock("a","a",7,8);
clock("a","b",7,8);
clock("a","c",7,8);
clock("a","C",7,8);
clock("a","G",7,8);
clock("b","a",7,8);
clock("b","b",7,8);
clock("b","c",7,8);
clock("b","C",7,8);
clock("b","G",7,8);
clock("c","a",7,8);
clock("c","b",7,8);
clock("c","c",7,8);
clock("c","C",7,8);
clock("c","G",7,8);
clock("C","a",7,8);
clock("C","b",7,8);
clock("C","c",7,8);
clock("C","C",7,8);
clock("C","G",7,8);
clock("G","a",7,8);
clock("G","b",7,8);
clock("G","c",7,8);
clock("G","C",7,8);
clock("G","G",7,8);
clock("a","a",8,9);
clock("a","b",8,9);
clock("a","c",8,9);
clock("a","C",8,9);
clock("a","G",8,9);
clock("b","a",8,9);
clock("b","b",8,9);
clock("b","c",8,9);
clock("b","C",8,9);
clock("b","G",8,9);
clock("c","a",8,9);
clock("c","b",8,9);
clock("c","c",8,9);
clock("c","C",8,9);
clock("c","G",8,9);
clock("C","a",8,9);
clock("C","b",8,9);
clock("C","c",8,9);
clock("C","C",8,9);
clock("C","G",8,9);
clock("G","a",8,9);
clock("G","b",8,9);
clock("G","c",8,9);
clock("G","C",8,9);
clock("G","G",8,9);
clock("a","a",9,10);
clock("a","b",9,10);
clock("a","c",9,10);
clock("a","C",9,10);
clock("a","G",9,10);
clock("b","a",9,10);
clock("b","b",9,10);
clock("b","c",9,10);
clock("b","C",9,10);
clock("b","G",9,10);
clock("c","a",9,10);
clock("c","b",9,10);
clock("c","c",9,10);
clock("c","C",9,10);
clock("c","G",9,10);
clock("C","a",9,10);
clock("C","b",9,10);
clock("C","c",9,10);
clock("C","C",9,10);
clock("C","G",9,10);
clock("G","a",9,10);
clock("G","b",9,10);
clock("G","c",9,10);
clock("G","C",9,10);
clock("G","G",9,10);
clock("a","a",10,11);
clock("a","b",10,11);
clock("a","c",10,11);
clock("a","C",10,11);
clock("a","G",10,11);
clock("b","a",10,11);
clock("b","b",10,11);
clock("b","c",10,11);
clock("b","C",10,11);
clock("b","G",10,11);
clock("c","a",10,11);
clock("c","b",10,11);
clock("c","c",10,11);
clock("c","C",10,11);
clock("c","G",10,11);
clock("C","a",10,11);
clock("C","b",10,11);
clock("C","c",10,11);
clock("C","C",10,11);
clock("C","G",10,11);
clock("G","a",10,11);
clock("G","b",10,11);
clock("G","c",10,11);
clock("G","C",10,11);
clock("G","G",10,11);
clock("a","a",11,12);
clock("a","b",11,12);
clock("a","c",11,12);
clock("a","C",11,12);
clock("a","G",11,12);
clock("b","a",11,12);
clock("b","b",11,12);
clock("b","c",11,12);
clock("b","C",11,12);
clock("b","G",11,12);
clock("c","a",11,12);
clock("c","b",11,12);
clock("c","c",11,12);
clock("c","C",11,12);
clock("c","G",11,12);
clock("C","a",11,12);
clock("C","b",11,12);
clock("C","c",11,12);
clock("C","C",11,12);
clock("C","G",11,12);
clock("G","a",11,12);
clock("G","b",11,12);
clock("G","c",11,12);
clock("G","C",11,12);
clock("G","G",11,12);
clock("a","a",12,13);
clock("a","b",12,13);
clock("a","c",12,13);
clock("a","C",12,13);
clock("a","G",12,13);
clock("b","a",12,13);
clock("b","b",12,13);
clock("b","c",12,13);
clock("b","C",12,13);
clock("b","G",12,13);
clock("c","a",12,13);
clock("c","b",12,13);
clock("c","c",12,13);
clock("c","C",12,13);
clock("c","G",12,13);
clock("C","a",12,13);
clock("C","b",12,13);
clock("C","c",12,13);
clock("C","C",12,13);
clock("C","G",12,13);
clock("G","a",12,13);
clock("G","b",12,13);
clock("G","c",12,13);
clock("G","C",12,13);
clock("G","G",12,13);
clock("a","a",13,14);
clock("a","b",13,14);
clock("a","c",13,14);
clock("a","C",13,14);
clock("a","G",13,14);
clock("b","a",13,14);
clock("b","b",13,14);
clock("b","c",13,14);
clock("b","C",13,14);
clock("b","G",13,14);
clock("c","a",13,14);
clock("c","b",13,14);
clock("c","c",13,14);
clock("c","C",13,14);
clock("c","G",13,14);
clock("C","a",13,14);
clock("C","b",13,14);
clock("C","c",13,14);
clock("C","C",13,14);
clock("C","G",13,14);
clock("G","a",13,14);
clock("G","b",13,14);
clock("G","c",13,14);
clock("G","C",13,14);
clock("G","G",13,14);
clock("a","a",14,15);
clock("a","b",14,15);
clock("a","c",14,15);
clock("a","C",14,15);
clock("a","G",14,15);
clock("b","a",14,15);
clock("b","b",14,15);
clock("b","c",14,15);
clock("b","C",14,15);
clock("b","G",14,15);
clock("c","a",14,15);
clock("c","b",14,15);
clock("c","c",14,15);
clock("c","C",14,15);
clock("c","G",14,15);
clock("C","a",14,15);
clock("C","b",14,15);
clock("C","c",14,15);
clock("C","C",14,15);
clock("C","G",14,15);
clock("G","a",14,15);
clock("G","b",14,15);
clock("G","c",14,15);
clock("G","C",14,15);
clock("G","G",14,15);
clock("a","a",15,16);
clock("a","b",15,16);
clock("a","c",15,16);
clock("a","C",15,16);
clock("a","G",15,16);
clock("b","a",15,16);
clock("b","b",15,16);
clock("b","c",15,16);
clock("b","C",15,16);
clock("b","G",15,16);
clock("c","a",15,16);
clock("c","b",15,16);
clock("c","c",15,16);
clock("c","C",15,16);
clock("c","G",15,16);
clock("C","a",15,16);
clock("C","b",15,16);
clock("C","c",15,16);
clock("C","C",15,16);
clock("C","G",15,16);
clock("G","a",15,16);
clock("G","b",15,16);
clock("G","c",15,16);
clock("G","C",15,16);
clock("G","G",15,16);
